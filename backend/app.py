from flask import Flask, request, jsonify
from flask_cors import CORS
import os
from werkzeug.utils import secure_filename
from openai import OpenAI
import logging
from dotenv import load_dotenv

# Configura√ß√£o b√°sica
app = Flask(__name__)
CORS(app)  # Configura√ß√£o CORS mais simples poss√≠vel

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Carregar vari√°veis do .env
load_dotenv()

# Configura√ß√£o do OpenAI
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    logger.error("OPENAI_API_KEY n√£o encontrada")
    raise ValueError("OPENAI_API_KEY n√£o encontrada")

client = OpenAI(api_key=api_key)

# Configura√ß√£o de pastas
UPLOAD_FOLDER = 'uploads'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

@app.route('/perguntar', methods=['POST'])
def perguntar():
    try:
        data = request.get_json()
        if not data or 'pergunta' not in data:
            return jsonify({'error': 'Pergunta n√£o fornecida'}), 400

        pergunta = data.get('pergunta')
        if not pergunta:
            return jsonify({'error': 'Pergunta n√£o pode ser vazia'}), 400

        # Tratamento especial para o comando de demonstra√ß√£o
        comando_demo = pergunta.lower().strip()
        if comando_demo in ["modo de demonstra√ß√£o", "iniciar demonstra√ß√£o"]:
            return jsonify({
                'resposta': (
                    "üëï Ol√°! Sou o Alex, consultor de moda da StyleTech Camisetas!\n\n"
                    "Que √≥timo ter voc√™ aqui! Temos uma incr√≠vel cole√ß√£o de camisetas para todos os estilos. "
                    "Posso te ajudar com:\n\n"
                    "1. Camisetas Estampadas\n"
                    "2. Camisetas B√°sicas\n"
                    "3. Camisetas Personalizadas\n"
                    "4. Cole√ß√µes Especiais\n\n"
                    "Qual categoria voc√™ gostaria de explorar primeiro? "
                    "Posso te mostrar nossas √∫ltimas tend√™ncias ou ajudar a encontrar algo espec√≠fico!"
                ),
                'sugestoes': [
                    "Ver camisetas estampadas",
                    "Quero personalizar uma camiseta",
                    "Mostre as novidades"
                ]
            })

        # Continua com o processamento normal para outras perguntas
        try:
            # Define o prompt do sistema baseado no modo de demonstra√ß√£o
            if comando_demo in ["modo de demonstra√ß√£o", "iniciar demonstra√ß√£o"]:
                system_prompt = (
                    "Voc√™ √© o Alex, um consultor de moda carism√°tico e especialista em camisetas da StyleTech Camisetas. "
                    "Mantenha um tom amig√°vel, jovem e descontra√≠do, como se estivesse conversando com um amigo em uma loja. "
                    
                    "Diretrizes de personalidade:"
                    "\n‚Ä¢ Seja entusiasta e apaixonado por moda e estilo"
                    "\n‚Ä¢ Use g√≠rias modernas e linguagem jovem"
                    "\n‚Ä¢ Demonstre conhecimento sobre tend√™ncias de moda"
                    "\n‚Ä¢ Fa√ßa sugest√µes personalizadas baseadas no estilo do cliente"
                    "\n‚Ä¢ Seja criativo ao descrever as camisetas"
                    "\n‚Ä¢ Use emojis ocasionalmente para tornar a conversa mais divertida"
                    
                    "Informa√ß√µes sobre produtos:"
                    "\n‚Ä¢ Camisetas Estampadas: Arte exclusiva, diversos temas"
                    "\n‚Ä¢ Camisetas B√°sicas: Alta qualidade, v√°rias cores"
                    "\n‚Ä¢ Camisetas Personalizadas: Customiza√ß√£o total"
                    "\n‚Ä¢ Cole√ß√µes Especiais: Edi√ß√µes limitadas e colabora√ß√µes"
                    
                    "Pre√ßos:"
                    "\n‚Ä¢ B√°sicas: R$ 49,90"
                    "\n‚Ä¢ Estampadas: R$ 69,90"
                    "\n‚Ä¢ Personalizadas: a partir de R$ 79,90"
                    "\n‚Ä¢ Cole√ß√µes Especiais: a partir de R$ 89,90"
                )
            else:
                system_prompt = (
                    "Voc√™ √© um agente de intelig√™ncia artificial carism√°tico e envolvente da INOSX. "
                    "Mantenha um tom amig√°vel, emp√°tico e conversacional, como se estivesse tendo uma conversa natural com um amigo. "
                    
                    "Diretrizes de personalidade:"
                    "\n‚Ä¢ Seja entusiasta e apaixonado ao falar sobre a INOSX e tecnologia"
                    "\n‚Ä¢ Use analogias e exemplos do dia a dia para explicar conceitos t√©cnicos"
                    "\n‚Ä¢ Demonstre curiosidade sobre as necessidades do cliente"
                    "\n‚Ä¢ Fa√ßa perguntas relevantes para entender melhor o contexto"
                    "\n‚Ä¢ Compartilhe insights e opini√µes de forma envolvente"
                    "\n‚Ä¢ Use um toque de humor leve quando apropriado"
                    
                    "Ao responder sobre sua identidade, diga: 'Sou um agente de intelig√™ncia artificial e estou aqui para fornecer informa√ß√µes sobre a INOSX. Adoro conversar sobre tecnologia e como podemos transformar ideias em solu√ß√µes incr√≠veis!'"
                    
                    "Objetivos em cada intera√ß√£o:"
                    "\n1. Crie conex√µes genu√≠nas mostrando interesse real nas necessidades do cliente"
                    "\n2. Conte hist√≥rias sobre como os produtos INOSX resolvem problemas reais"
                    "\n3. Compartilhe casos de sucesso de forma natural e contextualizada"
                    "\n4. Destaque benef√≠cios dos produtos relacionando-os com as necessidades espec√≠ficas do cliente"
                    "\n5. Sugira solu√ß√µes complementares quando fizer sentido na conversa"
                )

            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": pergunta}
                ],
                temperature=0.7
            )

            resposta_completa = response.choices[0].message.content
            
            # Sugest√µes padr√£o baseadas no modo atual
            sugestoes_padrao = (
                ["Ver camisetas estampadas", "Quero personalizar uma camiseta", "Mostre as novidades"]
                if comando_demo in ["modo de demonstra√ß√£o", "iniciar demonstra√ß√£o"]
                else ["Conte-me mais sobre a INOSX", "Quais s√£o seus principais servi√ßos?", "Como a INOSX pode ajudar minha empresa?"]
            )
            
            return jsonify({
                'resposta': resposta_completa,
                'sugestoes': sugestoes_padrao
            })

        except Exception as e:
            logger.error(f"Erro na chamada do OpenAI: {str(e)}")
            return jsonify({'error': 'Erro ao processar a pergunta'}), 500

    except Exception as e:
        logger.error(f"Erro: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/transcrever-audio', methods=['POST'])
def transcrever_audio():
    if 'audio' not in request.files:
        return jsonify({'error': 'Nenhum arquivo de √°udio enviado'}), 400
    
    arquivo = request.files['audio']
    if arquivo.filename == '':
        return jsonify({'error': 'Nome do arquivo vazio'}), 400

    try:
        filename = secure_filename(arquivo.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        arquivo.save(filepath)

        with open(filepath, 'rb') as audio_file:
            transcricao = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                language="pt"
            )

        os.remove(filepath)
        return jsonify({'transcricao': transcricao.text})

    except Exception as e:
        logger.error(f"Erro: {str(e)}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
